#+TITLE: Flx Completion
#+STARTUP: noindent

This is a package to provide a ~completion-style~ to Emacs that leverages [[https://github.com/lewang/flx][flx]].

* Installation

- Get the package, either from MELPA (soon to come):

  : M-x package-install RET flx-completion RET
  Or clone / download this repository and modify your ~load-path~:

  : (add-to-list 'load-path (expand-file-name "/path/to/flx-collection/" user-emacs-directory))
* Straight Example

#+begin_src emacs-lisp :tangle yes

(use-package flx
  :ensure t :straight t)

(use-package flx-completion
  :ensure t
  :straight
  (flx-completion :type git :host github :repo "jojojames/flx-completion")
  :after flx
  :config
  (push 'flx completion-styles)
  (setq
   ;; For example, project-find-file uses 'project-files which uses
   ;; substring completion by default. Set to nil to make sure it's using
   ;; flx.
   completion-category-defaults nil
   completion-category-overrides nil))

#+end_src

* Faster Scoring with Flx-rs

We can leverage [[https://github.com/jcs-elpa/flx-rs][flx-rs]] to achieve faster scoring by using Rust.

#+begin_src emacs-lisp :tangle yes
(use-package flx-rs
  :ensure t
  :straight
  (flx-rs
   :repo "jcs-elpa/flx-rs"
   :fetcher github
   :files (:defaults "bin"))
  ;; Manual steps:
  ;; Install Rust
  ;; $ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  ;; Update rustup
  ;; $ rustup update
  ;; Build flx-rs.
  ;; $ cargo build ~/.emacs.d/straight/repos/flx-rs/core
  ;; Symlink to Straight BUILD directory.
  ;; $ ln -s ~/.emacs.d/straight/repos/flx-rs/bin ~/.emacs.d/straight/build/flx-rs/bin
  :config
  (flx-rs-load-dyn)
  ;; This is not necessary since `flx-completion-all-completions' already checks
  ;; for this function. It'll still help other libraries that call `flx-score'
  ;; though.
  (advice-add 'flx-score :override #'flx-rs-score))
#+end_src

* Company Integration
flx may or may not be too slow when completing with
[[https://github.com/company-mode/company-mode][company-mode]].

For this, we can advise ~company-capf~ to use basic completions.

#+begin_src emacs-lisp :tangle yes

(defconst OG-COMPLETION-STYLES completion-styles
  "Original `completion-styles' Emacs comes with.")

(defun company-capf-with-og-completion-styles (f &rest args)
  "Set `completion-styles' to be the default Emacs `completion-styles'
while `company-capf' runs."
  (let ((completion-styles OG-COMPLETION-STYLES))
    (apply f args)))

(advice-add 'company-capf :around 'company-capf-with-og-completion-styles)
#+end_src

If you don't use the above advice and want to use ~flx~, you should use the
below ~company-transformer~.

#+begin_src emacs-lisp :tangle yes
(setq company-transformers
          '(flx-completion--company-sort-by-completion-score))
#+end_src
* Orderless Integration

[[https://github.com/oantolin/orderless][orderless]] can be used for filtering.

Quick eyetest benchmarking yields about a 20~ms improvement.

e.g.

#+begin_src emacs-lisp :tangle yes

(flx-completion--measure-time
 (funcall flx-completion-filter-fn
          string table pred point))

;; M-x describe-symbol (30000~ candidates)

;; Flex
;; (setq flx-completion-filter-fn 'flx-completion-filter-like-flex)
;; Type letter a
;; 0.114714
;; Type letter b
;; 0.071597
;; Type letter c
;; 0.096974
;; Type letter d
;; 0.092788
;; Type letter e
;; 0.124994
;; Type letter f
;; 0.077074
;; Type letter g
;; 0.090732

;; Orderless
;; (setq flx-completion-filter-fn 'flx-completion-filter-using-orderless)
;; Type letter a
;; 0.091367
;; Type letter b
;; 0.049451
;; Type letter c
;; 0.076276
;; Type letter d
;; 0.069673
;; Type letter e
;; 0.101040
;; Type letter f
;; 0.054231
;; Type letter g
;; 0.065002

#+end_src

To use [[https://github.com/oantolin/orderless][orderless]] filtering:

#+begin_src emacs-lisp :tangle yes
(setq flx-completion-filter-fn 'flx-completion-filter-using-orderless)
#+end_src
